<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    
    <context:property-placeholder location="classpath:munoz-common-data-datasource.properties"/>
    
    <!-- Data Source Declaration -->
    <bean id="dataSource" class="org.h2.jdbcx.JdbcConnectionPool" destroy-method="dispose">
        <constructor-arg>
            <bean class="${jdbc.driver}">
                <property name="url" value="${jdbc.url}"/>
                <property name="user" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </bean>
        </constructor-arg>
    </bean>
    
    <!-- Source: http://howtodoinjava.com/jpa/spring-hibernate-jpa-configuration-example/ -->
    <!-- 
    This produces a container-managed EntityManagerFactory; 
    rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean
    -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        
        <property name="dataSource" ref="dataSource" />
        
        <!-- This makes /META-INF/persistence.xml is no longer necessary -->
        <property name="packagesToScan" >
            <list>
                <value>hu.pe.munoz.commondata.entity</value>
            </list>
        </property>
        
        <!-- 
        JpaVendorAdapter implementation for Hibernate EntityManager.
        Exposes Hibernate's persistence provider and EntityManager extension interface 
        -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" >
                <property name="showSql" value="true" />
            </bean>
        </property>
        
        <!-- 
        Source: http://stackoverflow.com/questions/18077327
        
        Possible options for hibernate.hbm2ddl.auto property:
        validate    : validate that the schema matches, make no changes to the schema of the database, 
                      you probably want this for production.
        update      : update the schema to reflect the entities being persisted.
        create      : creates the schema necessary for your entities, destroying any previous data.
        create-drop : create the schema as in create above, but also drop the schema at the end of the session. 
                      This is great in early development or for testing.
        -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.hbm2ddl.import_files">init.sql</prop>
            </props> 
        </property>
    </bean>
    
    <!-- Transaction Manager is defined -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    
    <!-- Enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <context:component-scan base-package="hu.pe.munoz.commondata" />

</beans>